/***************************************************************************
  timelagsettingsdialog.cpp
  -------------------
  Copyright (C) 2013-2014, LI-COR Biosciences
  Author: Antonio Forgione

  This file is part of EddyPro (R).

  EddyPro (R) is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  EddyPro (R) is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with EddyPro (R). If not, see <http://www.gnu.org/licenses/>.
****************************************************************************/

#include <QDebug>
#include <QFileDialog>
#include <QGridLayout>
#include <QDateEdit>
#include <QPushButton>
#include <QRadioButton>
#include <QButtonGroup>
#include <QCheckBox>
#include <QSpinBox>
#include <QDoubleSpinBox>

#include <QwwButtonLineEdit/QwwButtonLineEdit>

#include "dbghelper.h"
#include "fileutils.h"
#include "alia.h"
#include "clicklabel.h"
#include "ecproject.h"
#include "configstate.h"
#include "timelagsettingsdialog.h"

TimeLagSettingsDialog::TimeLagSettingsDialog(QWidget *parent, EcProject *ecProject, ConfigState* config) :
    QDialog(parent),
    ecProject_(ecProject),
    configState_(config)
{
    setWindowTitle(tr("Time Lag Optimization Settings"));
    Qt::WindowFlags winFflags = windowFlags();
    winFflags &= ~Qt::WindowContextHelpButtonHint;
    setWindowFlags(winFflags);
    setWindowModality(Qt::WindowModal);

    QLabel *groupTitle = new QLabel();
    groupTitle->setText(tr("Configure smart time lag detection, "
                           "providing quality selection criteria and initial "
                           "time lag windows"));

    QLabel *hrLabel = new QLabel;
    hrLabel->setObjectName(QStringLiteral("hrLabel"));

    existingRadio = new QRadioButton(tr("Time lag file available :"));
    existingRadio->setToolTip(tr("<b>Time lag file available:</b> If you have a satisfactory time lag assessment from a previous run and it applies to the current dataset, you can use it by providing the path to the file 'eddypro_timelag_opt_ID.txt' that was generated by EddyPro in the previous run and contains the results of the assessment. This will shorten program execution time and assure full comparability between the current and previous results."));

    nonExistingRadio = new QRadioButton(tr("Time lag file not available :"));
    nonExistingRadio->setToolTip(tr("<b>Time lag file not available:</b> Choose this option and provide the following information if you need to optimize time lags for your dataset. EddyPro will complete the time lag optimization first and then complete the raw data processing and flux computation procedures."));

    lockedIcon = new QLabel();
    lockedIcon->setPixmap(QPixmap(QStringLiteral(":/icons/vlink-locked")));

    subsetCheckBox = new QCheckBox();
    subsetCheckBox->setProperty("subperiod", true);
    subsetCheckBox->setText(tr("Select a subperiod"));
    subsetCheckBox->setToolTip(tr("<b>Select a subperiod:</b> Select this option and set the corresponding dates, to identify the time period EddyPro will use for the Time lag optimization. This subperiod must fall within the time period defined by the available raw data."));

    startDateLabel = new ClickLabel(this);
    startDateLabel->setText(tr("Start :"));
    startDateLabel->setToolTip(tr("<b>Start:</b> Starting date of the time period to be used for time lag optimization. This time should not be shorter than about 1-2 months. As a general recommendation, select a time period during which the instrument setup did not undergo major modifications. Results obtained using a given time period (e.g., 2 months) can be used for processing a longer time period, in which major modifications did not occur in the setup. The stricter the threshold setup in this dialogue, the longer the period should be in order to get robust results."));
    startDateEdit = new QDateEdit();
    startDateEdit->setToolTip(startDateLabel->toolTip());
    startDateEdit->setCalendarPopup(true);
    startDateEdit->setDate(QDate(2000, 1, 1));
    Alia::customizeCalendar(startDateEdit->calendarWidget());

    endDateLabel = new ClickLabel(this);
    endDateLabel->setText(tr("End :"));
    endDateLabel->setToolTip(tr("<b>End:</b> End date of the time period to be used for time lag optimization. This time should not be shorter than about 1-2 months As a general recommendation, select a time period during which the instrumental setup did not undergo major modifications. Results obtained using a given time period (e.g., 2 months) can be used for processing a longer time period, in which major modifications did not occur in the setup. The stricter the threshold setup in this dialogue, the longer the period should be in order to get robust results."));
    endDateEdit = new QDateEdit();
    endDateEdit->setToolTip(endDateLabel->toolTip());
    endDateEdit->setCalendarPopup(true);
    endDateEdit->setDate(QDate::currentDate());
    Alia::customizeCalendar(endDateEdit->calendarWidget());

    QGridLayout* linkedLayout = new QGridLayout;
    linkedLayout->addWidget(lockedIcon, 0, 0, 2, 1, Qt::AlignHCenter | Qt::AlignVCenter);
    linkedLayout->addWidget(startDateEdit, 0, 1);
    linkedLayout->addWidget(endDateEdit, 1, 1);
    linkedLayout->setVerticalSpacing(3);

    fileEdit = new QwwButtonLineEdit();
    fileEdit->setIcon(QIcon(QStringLiteral(":/icons/clear-line")));
    fileEdit->setButtonVisible(false);
    fileEdit->setButtonPosition(QwwButtonLineEdit::RightInside);
    fileEdit->installEventFilter(const_cast<TimeLagSettingsDialog*>(this));
    fileEdit->setReadOnly(true);
    fileEdit->setProperty("asButtonLineEdit", true);
    fileEdit->setMinimumWidth(400);
    fileLoad = new QPushButton(tr("Load..."));
    fileLoad->setProperty("loadButton", true);
    fileLoad->setToolTip(tr("<b>Load:</b> Load an existing time lag file"));

    QHBoxLayout* fileContainerLayout = new QHBoxLayout;
    fileContainerLayout->addWidget(fileEdit);
    fileContainerLayout->addWidget(fileLoad);
    fileContainerLayout->setStretch(2, 1);
    fileContainerLayout->setContentsMargins(0, 0, 0, 0);
    fileContainerLayout->setSpacing(0);
    QWidget* fileContainer = new QWidget();
    fileContainer->setLayout(fileContainerLayout);

    radioGroup = new QButtonGroup(this);
    radioGroup->addButton(existingRadio, 0);
    radioGroup->addButton(nonExistingRadio, 1);

    h2oTitleLabel = new QLabel(tr("Water vapor time lag as a function of relative humidity"));
    h2oTitleLabel->setProperty("blueLabel", true);

    pgRangeLabel = new ClickLabel(tr("Plausibility range around median value :"));
    pgRangeLabel->setToolTip(tr("<b>Plausibility range around median value:</b> The plausibility range is defined as the median time lag, %1 <i>n</i> times the MAD (median of the absolute deviations from the median time lag). Specify <i>n</i> here. The value of 1.5 was heuristically found to be optimal.").arg(Defs::PLUSMINUS));
    pgRangeSpin = new QDoubleSpinBox;
    pgRangeSpin->setDecimals(1);
    pgRangeSpin->setRange(0.1, 100.0);
    pgRangeSpin->setSingleStep(0.1);
    pgRangeSpin->setAccelerated(true);
    pgRangeSpin->setSuffix(tr("  [mad]"));
    pgRangeSpin->setToolTip(pgRangeLabel->toolTip());
    pgRangeLabel_2 = new QLabel(tr("(<tt>%1%2n%3mad</tt>, where you set <tt>n</tt>)").arg(Defs::MICRO).arg(Defs::PLUSMINUS).arg(Defs::MID_DOT));

    rhClassLabel = new ClickLabel(tr("Number of RH classes :"));
    rhClassLabel->setToolTip(tr("<b>Number of RH classes:</b> Select the number or relative humidity classes, to assess water vapor time lag as a function of RH. The whole range or RH variation (0-100%) will be evenly divided according to the selected number of classes. For example, selecting 10 classes causes EddyPro to assess water vapor time lags for the classes 0-10%, 10-20%,..., 90-100%. Selecting 1 class, the label <b><i>Do not sort in RH classes</i></b> appears and will cause EddyPro to treat water vapor exactly like other passive gases. This option is only suitable for open path systems, or closed path systems with short and heated sampling lines."));

    rhClassSpin = new QSpinBox;
    rhClassSpin->setRange(1, 20);
    rhClassSpin->setSingleStep(1);
    rhClassSpin->setAccelerated(true);
    rhClassSpin->setSpecialValueText(tr("Do not sort in RH classes"));
    rhClassSpin->setToolTip(rhClassLabel->toolTip());

    gasTitleLabel = new QLabel(tr("Passive gases"));
    gasTitleLabel->setProperty("blueLabel", true);

    co2MinFluxLabel = new ClickLabel(tr("Minimum (absolute) %1 flux :").arg(Defs::CO2_STRING));
    co2MinFluxLabel->setToolTip(tr("<b>Minimum (absolute) %1 flux:</b> %1 time lags corresponding to fluxes smaller (in module) than this value will not be considered in the time lag optimization. Selecting high-enough fluxes assures that well developed turbulent conditions are met and the correlation function is well characterized.").arg(Defs::CO2_STRING));
    co2MinFluxSpin = new QDoubleSpinBox;
    co2MinFluxSpin->setDecimals(3);
    co2MinFluxSpin->setRange(0.0, 100.0);
    co2MinFluxSpin->setSingleStep(0.001);
    co2MinFluxSpin->setAccelerated(true);
    co2MinFluxSpin->setSuffix(tr("  [%1]").arg(Defs::UMOL_M2S_STRING));
    co2MinFluxSpin->setToolTip(co2MinFluxLabel->toolTip());

    ch4MinFluxLabel = new ClickLabel(tr("Minimum (absolute) %1 flux :").arg(Defs::CH4_STRING));
    ch4MinFluxLabel->setToolTip(tr("<b>Minimum (absolute) %1 flux:</b> %1 time lags corresponding to fluxes smaller (in module) than this value will not be considered in the time lag optimization. Selecting high-enough fluxes assures that well developed turbulent conditions are met and the correlation function is well characterized.").arg(Defs::CH4_STRING));
    ch4MinFluxSpin = new QDoubleSpinBox;
    ch4MinFluxSpin->setDecimals(3);
    ch4MinFluxSpin->setRange(0.0, 100.0);
    ch4MinFluxSpin->setSingleStep(0.001);
    ch4MinFluxSpin->setAccelerated(true);
    ch4MinFluxSpin->setSuffix(tr("  [%1]").arg(Defs::UMOL_M2S_STRING));
    ch4MinFluxSpin->setToolTip(ch4MinFluxLabel->toolTip());

    gas4MinFluxLabel = new ClickLabel(tr("Minimum (absolute) %1 gas flux :").arg(Defs::GAS4_STRING));
    gas4MinFluxLabel->setToolTip(tr("<b>Minimum (absolute) %1 gas flux:</b> %1 gas time lags corresponding to fluxes smaller (in module) than this value will not be considered in the time lag optimization. Selecting high-enough fluxes assures that well developed turbulent conditions are met and the correlation function is well characterized.").arg(Defs::GAS4_STRING));
    gas4MinFluxSpin = new QDoubleSpinBox;
    gas4MinFluxSpin->setDecimals(3);
    gas4MinFluxSpin->setRange(0.0, 100.0);
    gas4MinFluxSpin->setSingleStep(0.001);
    gas4MinFluxSpin->setAccelerated(true);
    gas4MinFluxSpin->setSuffix(tr("  [%1]").arg(Defs::UMOL_M2S_STRING));
    gas4MinFluxSpin->setToolTip(gas4MinFluxLabel->toolTip());

    leMinFluxLabel = new ClickLabel(tr("Minimum latent heat flux :"));
    leMinFluxLabel->setToolTip(tr("<b>Minimum latent heat flux:</b> Minimum latent heat flux: H<sub>2</sub>O time lags corresponding to latent heat fluxes smaller than this value will not be considered in the time lag optimization. Selecting high-enough fluxes assures that well developed turbulent conditions are met and the correlation function is well characterized."));
    leMinFluxSpin = new QDoubleSpinBox;
    leMinFluxSpin->setDecimals(1);
    leMinFluxSpin->setRange(0.0, 1000.0);
    leMinFluxSpin->setSingleStep(0.1);
    leMinFluxSpin->setAccelerated(true);
    leMinFluxSpin->setSuffix(tr("  [%1]").arg(Defs::W_M2_STRING));
    leMinFluxSpin->setToolTip(leMinFluxLabel->toolTip());

    searchWindowLabel = new QLabel(tr("Time lag searching windows"));
    searchWindowLabel->setProperty("blueLabel", true);

    minLabel = new QLabel(tr("Minimum"));
    minLabel->setProperty("blueLabel", true);
    minLabel->setToolTip(tr("<b>Minimum:</b> Minimum time lag for each gas, for initializing the time lag optimization procedure. The searching window defined by Minimum and Maximum should be large enough to accommodate all possible time lags. Leave as <i>Not set</i> if in doubt, EddyPro will initialize it automatically."));

    maxLabel = new QLabel(tr("Maximum"));
    maxLabel->setProperty("blueLabel", true);
    maxLabel->setToolTip(tr("<b>Maximum:</b> Maximum time lag for each gas, for initializing the time lag optimization procedure. The searching window defined by Minimum and Maximum should be large enough to accommodate all possible time lags. In particular, maximum time lags of water vapor in closed path systems can up to ten times higher than its nominal value, or even higher. Leave as <i>Not set</i> if in doubt, EddyPro will initialize it automatically."));

    co2Label = new ClickLabel(tr("%1 :").arg(Defs::CO2_STRING));

    minCo2TlSpin = new QDoubleSpinBox;
    minCo2TlSpin->setDecimals(1);
    minCo2TlSpin->setRange(-1000.1, 1000.0);
    minCo2TlSpin->setSingleStep(0.1);
    minCo2TlSpin->setSpecialValueText(tr("Detect automatically"));
    minCo2TlSpin->setAccelerated(true);
    minCo2TlSpin->setSuffix(tr("  [s]"));
    minCo2TlSpin->setToolTip(minLabel->toolTip());

    maxCo2TlSpin = new QDoubleSpinBox;
    maxCo2TlSpin->setDecimals(1);
    maxCo2TlSpin->setRange(-1000.1, 1000.0);
    maxCo2TlSpin->setSingleStep(0.1);
    maxCo2TlSpin->setSpecialValueText(tr("Detect automatically"));
    maxCo2TlSpin->setAccelerated(true);
    maxCo2TlSpin->setSuffix(tr("  [s]"));
    maxCo2TlSpin->setToolTip(maxLabel->toolTip());

    h2oLabel = new ClickLabel(tr("%1 :").arg(Defs::H2O_STRING));

    minH2oTlSpin = new QDoubleSpinBox;
    minH2oTlSpin->setDecimals(1);
    minH2oTlSpin->setRange(-1000.1, 1000.0);
    minH2oTlSpin->setSingleStep(0.1);
    minH2oTlSpin->setSpecialValueText(tr("Detect automatically"));
    minH2oTlSpin->setAccelerated(true);
    minH2oTlSpin->setSuffix(tr("  [s]"));
    minH2oTlSpin->setToolTip(minLabel->toolTip());

    maxH2oTlSpin = new QDoubleSpinBox;
    maxH2oTlSpin->setDecimals(1);
    maxH2oTlSpin->setRange(-1000.1, 1000.0);
    maxH2oTlSpin->setSingleStep(0.1);
    maxH2oTlSpin->setSpecialValueText(tr("Detect automatically"));
    maxH2oTlSpin->setAccelerated(true);
    maxH2oTlSpin->setSuffix(tr("  [s]"));
    maxH2oTlSpin->setToolTip(maxLabel->toolTip());

    ch4Label = new ClickLabel(tr("%1 :").arg(Defs::CH4_STRING));

    minCh4TlSpin = new QDoubleSpinBox;
    minCh4TlSpin->setDecimals(1);
    minCh4TlSpin->setRange(-1000.1, 1000.0);
    minCh4TlSpin->setSingleStep(0.1);
    minCh4TlSpin->setSpecialValueText(tr("Detect automatically"));
    minCh4TlSpin->setAccelerated(true);
    minCh4TlSpin->setSuffix(tr("  [s]"));
    minCh4TlSpin->setToolTip(minLabel->toolTip());

    maxCh4TlSpin = new QDoubleSpinBox;
    maxCh4TlSpin->setDecimals(1);
    maxCh4TlSpin->setRange(-1000.1, 1000.0);
    maxCh4TlSpin->setSingleStep(0.1);
    maxCh4TlSpin->setSpecialValueText(tr("Detect automatically"));
    maxCh4TlSpin->setAccelerated(true);
    maxCh4TlSpin->setSuffix(tr("  [s]"));
    maxCh4TlSpin->setToolTip(maxLabel->toolTip());

    gas4Label = new ClickLabel(tr("%1 gas :").arg(Defs::GAS4_STRING));

    minGas4TlSpin = new QDoubleSpinBox;
    minGas4TlSpin->setDecimals(1);
    minGas4TlSpin->setRange(-1000.1, 1000.0);
    minGas4TlSpin->setSingleStep(0.1);
    minGas4TlSpin->setSpecialValueText(tr("Detect automatically"));
    minGas4TlSpin->setAccelerated(true);
    minGas4TlSpin->setSuffix(tr("  [s]"));
    minGas4TlSpin->setToolTip(minLabel->toolTip());

    maxGas4TlSpin = new QDoubleSpinBox;
    maxGas4TlSpin->setDecimals(1);
    maxGas4TlSpin->setRange(-1000.1, 1000.0);
    maxGas4TlSpin->setSingleStep(0.1);
    maxGas4TlSpin->setSpecialValueText(tr("Detect automatically"));
    maxGas4TlSpin->setAccelerated(true);
    maxGas4TlSpin->setSuffix(tr("  [s]"));
    maxGas4TlSpin->setToolTip(maxLabel->toolTip());

    QGridLayout *propertiesLayout = new QGridLayout();
    propertiesLayout->addWidget(existingRadio, 0, 0);
    propertiesLayout->addWidget(fileContainer, 0, 1, 1, 3);
    propertiesLayout->addWidget(nonExistingRadio, 2, 0);
    propertiesLayout->addWidget(subsetCheckBox, 2, 1, 1, 1, Qt::AlignLeft);
    propertiesLayout->addWidget(startDateLabel, 2, 1, Qt::AlignRight);
    propertiesLayout->addLayout(linkedLayout, 2, 2, 2, 1);
    propertiesLayout->addWidget(endDateLabel, 3, 1, Qt::AlignRight);
    propertiesLayout->addWidget(pgRangeLabel, 4, 1, 1, 1, Qt::AlignRight);
    propertiesLayout->addWidget(pgRangeSpin, 4, 2);
    propertiesLayout->addWidget(pgRangeLabel_2, 4, 3);

    propertiesLayout->addWidget(h2oTitleLabel, 5, 0, 1, 2);

    propertiesLayout->addWidget(rhClassLabel, 6, 1, Qt::AlignRight);
    propertiesLayout->addWidget(rhClassSpin, 6, 2);
    propertiesLayout->addWidget(leMinFluxLabel, 7, 1, Qt::AlignRight);
    propertiesLayout->addWidget(leMinFluxSpin, 7, 2);

    propertiesLayout->addWidget(gasTitleLabel, 8, 0);

    propertiesLayout->addWidget(co2MinFluxLabel, 9, 1, Qt::AlignRight);
    propertiesLayout->addWidget(co2MinFluxSpin, 9, 2);
    propertiesLayout->addWidget(ch4MinFluxLabel, 10, 1, Qt::AlignRight);
    propertiesLayout->addWidget(ch4MinFluxSpin, 10, 2);
    propertiesLayout->addWidget(gas4MinFluxLabel, 11, 1, Qt::AlignRight);
    propertiesLayout->addWidget(gas4MinFluxSpin, 11, 2);

    propertiesLayout->addWidget(searchWindowLabel, 12, 0);
    propertiesLayout->addWidget(minLabel, 13, 1);
    propertiesLayout->addWidget(maxLabel, 13, 2);
    propertiesLayout->addWidget(co2Label, 14, 0, Qt::AlignRight);
    propertiesLayout->addWidget(minCo2TlSpin, 14, 1);
    propertiesLayout->addWidget(maxCo2TlSpin, 14, 2);
    propertiesLayout->addWidget(h2oLabel, 15, 0, Qt::AlignRight);
    propertiesLayout->addWidget(minH2oTlSpin, 15, 1);
    propertiesLayout->addWidget(maxH2oTlSpin, 15, 2);
    propertiesLayout->addWidget(ch4Label, 16, 0, Qt::AlignRight);
    propertiesLayout->addWidget(minCh4TlSpin, 16, 1);
    propertiesLayout->addWidget(maxCh4TlSpin, 16, 2);
    propertiesLayout->addWidget(gas4Label, 17, 0, Qt::AlignRight);
    propertiesLayout->addWidget(minGas4TlSpin, 17, 1);
    propertiesLayout->addWidget(maxGas4TlSpin, 17, 2);
    propertiesLayout->setVerticalSpacing(3);
    propertiesLayout->setRowMinimumHeight(1, 10);
    propertiesLayout->setContentsMargins(3, 3, 3, 3);

    QWidget *propertiesFrame = new QWidget();
    propertiesFrame->setLayout(propertiesLayout);

    QPushButton *okButton = new QPushButton(tr("&Ok"));
    okButton->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    okButton->setDefault(true);
    okButton->setProperty("commonButton", true);

    QGridLayout *mainLayout = new QGridLayout(this);
    mainLayout->addWidget(groupTitle, 0, 0);
    mainLayout->addWidget(hrLabel, 1, 0);
    mainLayout->addWidget(propertiesFrame, 2, 0);
    mainLayout->addWidget(okButton, 3, 0, 1, 1, Qt::AlignCenter);
    mainLayout->setVerticalSpacing(10);
    mainLayout->setContentsMargins(30, 30, 30, 30);
    mainLayout->setSizeConstraint(QLayout::SetFixedSize);
    setLayout(mainLayout);

    connect(radioGroup, SIGNAL(buttonClicked(int)),
            this, SLOT(updateTlMode(int)));

    connect(radioGroup, SIGNAL(buttonClicked(int)),
            this, SLOT(radioClicked(int)));

    connect(fileEdit, SIGNAL(buttonClicked()),
            this, SLOT(clearFileEdit()));
    connect(fileEdit, SIGNAL(textChanged(QString)),
            this, SLOT(updateFile(QString)));
    connect(fileLoad, SIGNAL(clicked()),
            this, SLOT(fileLoad_clicked()));

    connect(subsetCheckBox, SIGNAL(toggled(bool)),
            this, SLOT(updateSubsetSelection(bool)));

    connect(startDateLabel, SIGNAL(clicked()),
            this, SLOT(onStartDateLabelClicked()));
    connect(startDateEdit, SIGNAL(dateChanged(QDate)),
            this, SLOT(updateStartDate(QDate)));

    connect(endDateLabel, SIGNAL(clicked()),
            this, SLOT(onEndDateLabelClicked()));
    connect(endDateEdit, SIGNAL(dateChanged(QDate)),
            this, SLOT(updateEndDate(QDate)));

    connect(rhClassLabel, SIGNAL(clicked()),
            this, SLOT(onRhClassClicked()));
    connect(rhClassSpin, SIGNAL(valueChanged(int)),
            this, SLOT(updateRhClass(int)));

    connect(co2MinFluxLabel, SIGNAL(clicked()),
            this, SLOT(onCo2MinFluxClicked()));
    connect(co2MinFluxSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateCo2MinFlux(double)));

    connect(ch4MinFluxLabel, SIGNAL(clicked()),
            this, SLOT(onCh4MinFluxClicked()));
    connect(ch4MinFluxSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateCh4MinFlux(double)));

    connect(gas4MinFluxLabel, SIGNAL(clicked()),
            this, SLOT(onGas4MinFluxClicked()));
    connect(gas4MinFluxSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateGas4MinFlux(double)));

    connect(leMinFluxLabel, SIGNAL(clicked()),
            this, SLOT(onLeMinFluxClicked()));
    connect(leMinFluxSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateLeMinFlux(double)));

    connect(pgRangeLabel, SIGNAL(clicked()),
            this, SLOT(onPgRangeLabelClicked()));
    connect(pgRangeSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updatePgRange(double)));

    connect(co2Label, SIGNAL(clicked()),
            this, SLOT(onCo2LabelClicked()));
    connect(minCo2TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMinCo2Tl(double)));
    connect(maxCo2TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMaxCo2Tl(double)));

    connect(h2oLabel, SIGNAL(clicked()),
            this, SLOT(onH2oLabelClicked()));
    connect(minH2oTlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMinH2oTl(double)));
    connect(maxH2oTlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMaxH2oTl(double)));

    connect(ch4Label, SIGNAL(clicked()),
            this, SLOT(onCh4LabelClicked()));
    connect(minCh4TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMinCh4Tl(double)));
    connect(maxCh4TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMaxCh4Tl(double)));

    connect(gas4Label, SIGNAL(clicked()),
            this, SLOT(onGas4LabelClicked()));
    connect(minGas4TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMinGas4Tl(double)));
    connect(maxGas4TlSpin, SIGNAL(valueChanged(double)),
            this, SLOT(updateMaxGas4Tl(double)));

    connect(okButton, SIGNAL(clicked()), this, SLOT(close()));

    // init
    forceEndDatePolicy();
}

TimeLagSettingsDialog::~TimeLagSettingsDialog()
{
    qDebug() << Q_FUNC_INFO;
}

void TimeLagSettingsDialog::close()
{
    if (isVisible())
        hide();
    emit saveRequest();
}

void TimeLagSettingsDialog::reset()
{
    DEBUG_FUNC_NAME

    updateTlMode(1);

    existingRadio->setChecked(false);
    nonExistingRadio->setChecked(true);
    fileEdit->clear();
    subsetCheckBox->setChecked(false);
    startDateEdit->setDate(QDate::fromString(ecProject_->generalStartDate(), Qt::ISODate));
    endDateEdit->setDate(QDate::fromString(ecProject_->generalEndDate(), Qt::ISODate));

    pgRangeSpin->setValue(1.5);
    rhClassSpin->setValue(10);
    leMinFluxSpin->setValue(20.0);
    co2MinFluxSpin->setValue(2.0);
    ch4MinFluxSpin->setValue(0.2);
    gas4MinFluxSpin->setValue(0.02);

    minCo2TlSpin->setValue(-1000.1);
    maxCo2TlSpin->setValue(-1000.1);
    minH2oTlSpin->setValue(-1000.1);
    maxH2oTlSpin->setValue(-1000.1);
    minCh4TlSpin->setValue(-1000.1);
    maxCh4TlSpin->setValue(-1000.1);
    minGas4TlSpin->setValue(-1000.1);
    maxGas4TlSpin->setValue(-1000.1);

    radioClicked(1);
}

void TimeLagSettingsDialog::refresh()
{
    DEBUG_FUNC_NAME

    // save the modified flag to prevent side effects of setting widgets
    bool oldmod = ecProject_->modified();
    ecProject_->blockSignals(true);

    existingRadio->setChecked(!ecProject_->timelagOptMode());
    nonExistingRadio->setChecked(ecProject_->timelagOptMode());
    fileEdit->setText(QDir::toNativeSeparators(ecProject_->timelagOptFile()));
    Alia::updateLineEditToolip(fileEdit);

    subsetCheckBox->setChecked(ecProject_->timelagOptSubset());
    if (ecProject_->timelagOptSubset())
    {
        startDateEdit->setDate(QDate::fromString(ecProject_->timelagOptStartDate(), Qt::ISODate));
        endDateEdit->setDate(QDate::fromString(ecProject_->timelagOptEndDate(), Qt::ISODate));
    }
    else
    {
        startDateEdit->setDate(QDate::fromString(ecProject_->generalStartDate(), Qt::ISODate));
        endDateEdit->setDate(QDate::fromString(ecProject_->generalEndDate(), Qt::ISODate));
    }

    rhClassSpin->setValue(ecProject_->timelagOptH2oNClass());
    co2MinFluxSpin->setValue(ecProject_->timelagOptCo2MinFlux());
    ch4MinFluxSpin->setValue(ecProject_->timelagOptCh4MinFlux());
    gas4MinFluxSpin->setValue(ecProject_->timelagOptGas4MinFlux());
    leMinFluxSpin->setValue(ecProject_->timelagOptLeMinFlux());
    pgRangeSpin->setValue(ecProject_->timelagOptPgRange());

    minCo2TlSpin->setValue(ecProject_->timelagOptCo2MinLag());
    maxCo2TlSpin->setValue(ecProject_->timelagOptCo2MaxLag());
    minH2oTlSpin->setValue(ecProject_->timelagOptH2oMinLag());
    maxH2oTlSpin->setValue(ecProject_->timelagOptH2oMaxLag());
    minCh4TlSpin->setValue(ecProject_->timelagOptCh4MinLag());
    maxCh4TlSpin->setValue(ecProject_->timelagOptCh4MaxLag());
    minGas4TlSpin->setValue(ecProject_->timelagOptGas4MinLag());
    maxGas4TlSpin->setValue(ecProject_->timelagOptGas4MaxLag());

    radioClicked(ecProject_->timelagOptMode());

    // restore modified flag
    ecProject_->setModified(oldmod);
    ecProject_->blockSignals(false);
}

void TimeLagSettingsDialog::setDateRange(QPair<QDateTime, QDateTime> dates)
{
    if (!ecProject_->timelagOptSubset())
    {
        startDateEdit->setDate(dates.first.date());
        endDateEdit->setDate(dates.second.date());
    }
}

void TimeLagSettingsDialog::updateTlMode(int radioButton)
{
    ecProject_->setTimelagOptMode(radioButton);
}

void TimeLagSettingsDialog::radioClicked(int radioButton)
{
    if (radioButton == 0)
    {
        fileEdit->setEnabled(true);
        fileLoad->setEnabled(true);
        subsetCheckBox->setEnabled(false);
        startDateLabel->setEnabled(false);
        startDateEdit->setEnabled(false);
        lockedIcon->setEnabled(false);
        endDateLabel->setEnabled(false);
        endDateEdit->setEnabled(false);
        rhClassLabel->setEnabled(false);
        rhClassSpin->setEnabled(false);
        co2MinFluxLabel->setEnabled(false);
        co2MinFluxSpin->setEnabled(false);
        ch4MinFluxLabel->setEnabled(false);
        ch4MinFluxSpin->setEnabled(false);
        gas4MinFluxLabel->setEnabled(false);
        gas4MinFluxSpin->setEnabled(false);
        leMinFluxLabel->setEnabled(false);
        leMinFluxSpin->setEnabled(false);
        pgRangeLabel->setEnabled(false);
        pgRangeLabel_2->setEnabled(false);
        pgRangeSpin->setEnabled(false);
        co2Label->setEnabled(false);
        h2oLabel->setEnabled(false);
        ch4Label->setEnabled(false);
        gas4Label->setEnabled(false);
        minCo2TlSpin->setEnabled(false);
        maxCo2TlSpin->setEnabled(false);
        minH2oTlSpin->setEnabled(false);
        maxH2oTlSpin->setEnabled(false);
        minCh4TlSpin->setEnabled(false);
        maxCh4TlSpin->setEnabled(false);
        minGas4TlSpin->setEnabled(false);
        maxGas4TlSpin->setEnabled(false);
    }
    else
    {
        fileEdit->setEnabled(false);
        fileLoad->setEnabled(false);
        subsetCheckBox->setEnabled(true);
        startDateLabel->setEnabled(subsetCheckBox->isChecked());
        startDateEdit->setEnabled(subsetCheckBox->isChecked());
        lockedIcon->setEnabled(subsetCheckBox->isChecked());
        endDateLabel->setEnabled(subsetCheckBox->isChecked());
        endDateEdit->setEnabled(subsetCheckBox->isChecked());
        rhClassLabel->setEnabled(true);
        rhClassSpin->setEnabled(true);
        co2MinFluxLabel->setEnabled(true);
        co2MinFluxSpin->setEnabled(true);
        ch4MinFluxLabel->setEnabled(true);
        ch4MinFluxSpin->setEnabled(true);
        gas4MinFluxLabel->setEnabled(true);
        gas4MinFluxSpin->setEnabled(true);
        leMinFluxLabel->setEnabled(true);
        leMinFluxSpin->setEnabled(true);
        pgRangeLabel->setEnabled(true);
        pgRangeLabel_2->setEnabled(true);
        pgRangeSpin->setEnabled(true);
        co2Label->setEnabled(true);
        h2oLabel->setEnabled(true);
        ch4Label->setEnabled(true);
        gas4Label->setEnabled(true);
        minCo2TlSpin->setEnabled(true);
        maxCo2TlSpin->setEnabled(true);
        minH2oTlSpin->setEnabled(true);
        maxH2oTlSpin->setEnabled(true);
        minCh4TlSpin->setEnabled(true);
        maxCh4TlSpin->setEnabled(true);
        minGas4TlSpin->setEnabled(true);
        maxGas4TlSpin->setEnabled(true);
    }
}

void TimeLagSettingsDialog::onStartDateLabelClicked()
{
    DEBUG_FUNC_NAME
    startDateEdit->setFocus();
    Alia::showCalendarOf(startDateEdit);
}

void TimeLagSettingsDialog::onEndDateLabelClicked()
{
    DEBUG_FUNC_NAME
    endDateEdit->setFocus();
    Alia::showCalendarOf(endDateEdit);
}

void TimeLagSettingsDialog::updateStartDate(const QDate &d)
{
    ecProject_->setTimelagOptStartDate(d.toString(Qt::ISODate));
    forceEndDatePolicy();
}

void TimeLagSettingsDialog::updateEndDate(const QDate &d)
{
    ecProject_->setTimelagOptEndDate(d.toString(Qt::ISODate));
}

bool TimeLagSettingsDialog::eventFilter(QObject* watched, QEvent* event)
{
    QwwButtonLineEdit* lineEdit1 = fileEdit;

    if (lineEdit1)
    {
        if (watched == lineEdit1 && event->type() == QEvent::EnabledChange)
        {
            lineEdit1->setButtonVisible(lineEdit1->isEnabled() && !lineEdit1->text().isEmpty());
        }
    }
    return QObject::eventFilter(watched, event);
}

// enforce (start date&time) <= (end date&time)
void TimeLagSettingsDialog::forceEndDatePolicy()
{
    DEBUG_FUNC_NAME

    endDateEdit->setMinimumDate(startDateEdit->date());
}

void TimeLagSettingsDialog::updateFile(const QString& fp)
{
    DEBUG_FUNC_NAME

    QWidget* senderWidget = qobject_cast<QWidget *>(sender());
    qDebug() << "fp" << fp << "senderWidget" << senderWidget;

    ecProject_->setTimelagOptFile(QDir::cleanPath(fp));
    fileEdit->setButtonVisible(fileEdit->isEnabled() && !fileEdit->text().isEmpty());
    Alia::updateLineEditToolip(fileEdit);
}

void TimeLagSettingsDialog::fileLoad_clicked()
{
    DEBUG_FUNC_NAME
    QString searchPath = QDir::homePath();
    if (!configState_->window.last_data_path.isEmpty()
        && FileUtils::existsPath(configState_->window.last_data_path))
    {
        searchPath = configState_->window.last_data_path;
    }

    QString paramFile = QFileDialog::getOpenFileName(this,
                        tr("Select the Timelag Optimization File"),
                        searchPath,
                        tr("All Files (*.*)")
                        );
    if (!paramFile.isEmpty())
    {
        QFileInfo paramFilePath(paramFile);
        QString canonicalParamFile = paramFilePath.canonicalFilePath();
        fileEdit->setText(QDir::toNativeSeparators(canonicalParamFile));

        QString lastPath = paramFilePath.canonicalPath();
        configState_->window.last_data_path = lastPath;
        Alia::updateLastDatapath(lastPath);
    }
}

void TimeLagSettingsDialog::onRhClassClicked()
{
    rhClassSpin->setFocus();
    rhClassSpin->selectAll();
}

void TimeLagSettingsDialog::updateRhClass(int n)
{
    ecProject_->setTimelagOptH2oNClass(n);
}

void TimeLagSettingsDialog::onCo2MinFluxClicked()
{
    co2MinFluxSpin->setFocus();
    co2MinFluxSpin->selectAll();
}

void TimeLagSettingsDialog::updateCo2MinFlux(double d)
{
    ecProject_->setTimelagOptCo2MinFlux(d);
}

void TimeLagSettingsDialog::onCh4MinFluxClicked()
{
    ch4MinFluxSpin->setFocus();
    ch4MinFluxSpin->selectAll();
}

void TimeLagSettingsDialog::updateCh4MinFlux(double d)
{
    ecProject_->setTimelagOptCh4MinFlux(d);
}

void TimeLagSettingsDialog::onGas4MinFluxClicked()
{
    gas4MinFluxSpin->setFocus();
    gas4MinFluxSpin->selectAll();
}

void TimeLagSettingsDialog::updateGas4MinFlux(double d)
{
    ecProject_->setTimelagOptGas4MinFlux(d);
}

void TimeLagSettingsDialog::onLeMinFluxClicked()
{
    leMinFluxSpin->setFocus();
    leMinFluxSpin->selectAll();
}

void TimeLagSettingsDialog::updateLeMinFlux(double d)
{
    ecProject_->setTimelagOptLeMinFlux(d);
}

void TimeLagSettingsDialog::onPgRangeLabelClicked()
{
    pgRangeSpin->setFocus();
    pgRangeSpin->selectAll();
}

void TimeLagSettingsDialog::updatePgRange(double d)
{
    ecProject_->setTimelagOptPgRange(d);
}

void TimeLagSettingsDialog::onCo2LabelClicked()
{
    minCo2TlSpin->setFocus();
    minCo2TlSpin->selectAll();
}

void TimeLagSettingsDialog::updateMinCo2Tl(double d)
{
    ecProject_->setTimelagOptCo2MinLag(d);

    // min/max constraint
    if (d >= maxCo2TlSpin->value())
    {
        maxCo2TlSpin->setValue(d + 0.1);
    }
}

void TimeLagSettingsDialog::updateMaxCo2Tl(double d)
{
    ecProject_->setTimelagOptCo2MaxLag(d);

    // min/max constraint
    if (d <= minCo2TlSpin->value())
    {
        minCo2TlSpin->setValue(d - 0.1);
    }
}

void TimeLagSettingsDialog::onH2oLabelClicked()
{
    minH2oTlSpin->setFocus();
    minH2oTlSpin->selectAll();
}

void TimeLagSettingsDialog::updateMinH2oTl(double d)
{
    ecProject_->setTimelagOptH2oMinLag(d);

    // min/max constraint
    if (d >= maxH2oTlSpin->value())
    {
        maxH2oTlSpin->setValue(d + 0.1);
    }
}

void TimeLagSettingsDialog::updateMaxH2oTl(double d)
{
    ecProject_->setTimelagOptH2oMaxLag(d);

    // min/max constraint
    if (d <= minH2oTlSpin->value())
    {
        minH2oTlSpin->setValue(d - 0.1);
    }
}

void TimeLagSettingsDialog::onCh4LabelClicked()
{
    minCh4TlSpin->setFocus();
    minCh4TlSpin->selectAll();
}

void TimeLagSettingsDialog::updateMinCh4Tl(double d)
{
    ecProject_->setTimelagOptCh4MinLag(d);

    // min/max constraint
    if (d >= maxCh4TlSpin->value())
    {
        maxCh4TlSpin->setValue(d + 0.1);
    }
}

void TimeLagSettingsDialog::updateMaxCh4Tl(double d)
{
    ecProject_->setTimelagOptCh4MaxLag(d);

    // min/max constraint
    if (d <= minCh4TlSpin->value())
    {
        minCh4TlSpin->setValue(d - 0.1);
    }
}

void TimeLagSettingsDialog::onGas4LabelClicked()
{
    minGas4TlSpin->setFocus();
    minGas4TlSpin->selectAll();
}

void TimeLagSettingsDialog::updateMinGas4Tl(double d)
{
    ecProject_->setTimelagOptGas4MinLag(d);

    // min/max constraint
    if (d >= maxGas4TlSpin->value())
    {
        maxGas4TlSpin->setValue(d + 0.1);
    }
}

void TimeLagSettingsDialog::updateMaxGas4Tl(double d)
{
    ecProject_->setTimelagOptGas4MaxLag(d);

    // min/max constraint
    if (d <= minGas4TlSpin->value())
    {
        minGas4TlSpin->setValue(d - 0.1);
    }
}

void TimeLagSettingsDialog::updateSubsetSelection(bool b)
{
    ecProject_->setTimelagOptSubset(b);

    foreach (QWidget *w, QList<QWidget *>()
             << startDateLabel
             << startDateEdit
             << lockedIcon
             << endDateLabel
             << endDateEdit)
    {
        w->setEnabled(b);
    }
}

void TimeLagSettingsDialog::clearFileEdit()
{
    fileEdit->clear();
    Alia::updateLineEditToolip(fileEdit);
}

void TimeLagSettingsDialog::setSmartfluxUI()
{
    bool on = configState_->project.smartfluxMode;

    nonExistingRadio->setDisabled(on);

    // block project modified() signal
    bool oldmod;
    if (!on)
    {
        // save the modified flag to prevent side effects of setting widgets
        oldmod = ecProject_->modified();
        ecProject_->blockSignals(true);
    }

    if (on)
    {
        radioGroup->button(0)->click();
    }

    // restore project modified() signal
    if (!on)
    {
        // restore modified flag
        ecProject_->setModified(oldmod);
        ecProject_->blockSignals(false);
    }
}
